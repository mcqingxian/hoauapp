package com.hoau.hoauapp.si.dc.company;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.11
 * 2015-01-15T09:12:56.150+08:00
 * Generated source version: 2.7.11
 * 
 */
@WebServiceClient(name = "CompanyServices", 
                  wsdlLocation = "http://10.39.109.29:8080/services/CompanyServices?wsdl",
                  targetNamespace = "http://www.szzc.com.cn/services/CompanyServices") 
public class CompanyServices_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.szzc.com.cn/services/CompanyServices", "CompanyServices");
    public final static QName CompanyServicesPort = new QName("http://www.szzc.com.cn/services/CompanyServices", "CompanyServicesPort");
    static {
        URL url = null;
        try {
            url = new URL("http://10.39.109.29:8080/services/CompanyServices?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(CompanyServices_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://10.39.109.29:8080/services/CompanyServices?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public CompanyServices_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CompanyServices_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CompanyServices_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns CompanyServices
     */
    @WebEndpoint(name = "CompanyServicesPort")
    public CompanyServices getCompanyServicesPort() {
        return super.getPort(CompanyServicesPort, CompanyServices.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CompanyServices
     */
    @WebEndpoint(name = "CompanyServicesPort")
    public CompanyServices getCompanyServicesPort(WebServiceFeature... features) {
        return super.getPort(CompanyServicesPort, CompanyServices.class, features);
    }

}
